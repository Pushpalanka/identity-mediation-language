@Source (protocol="http", host="localhost", port=8290)
@Path ("/travelocity")
package org.wso2.travelocity

const endpoint authenticationEp = "http://localhost:8290/authenticate/";
const endpoint callbackURL = "http://localhost:8290/travelocity/localauth";

@POST
@Path ("/saml")
resource saml (message m) {
	// receive message, build SAML request and add sessionID to AuthenticationContext
	m = SAMLRequestProcessor(m);

	// build Authentication request to be send to the Authentication Endpoint
	message authReq; 
	try {
		// create message to redirect to authenticationEndpoint (ie. set 302 Location header)
		authReq = buildAuthenticationRequest(m, authenticationEp, callbackURL );
	} catch (exception e) {
		authReq = new message();
		authReq.setHeader(HTTP.StatusCode, 500);
		authReq.setPayload(Type.JSON, {"error":"backend failed"});
	}
    
	// redirect the authentication endpoint
	reply authReq;
}


@POST
@Path ("/localauth")
resource localauth (message m) {
	try {	
		// talk to the user store and authenticate the user based on params sent from the authenticationEndpoint
		m = AuthenticationResponseProcessor(m, "isSubject=true,subjectClaim=username,isAttribute=true");
	} catch (exception e) {
		message response;
		// if authentication failed we redirect to the login page again.
		if (m.getHeader("isAuthenticated").getValue() == "false") {
			response = authReq = buildAuthenticationRequest (m, authenticationEp, callbackURL);	
		} else {
			response = new message();
			message.setHeader(HTTP.StatusCode, 500);
			message.setPayload(Type.JSON, {"error":"backend failed"});
		}

		reply response;
	}

	// build SAML response and set it in the message body	
	m = SAMLResponseBuilder(m);

    // set required headers
	m.setHeader(HTTP.Connection, "keep-alive");
	m.setHeader(HTTP.Content_Encoding, "gzip");
	m.setHeader(HTTP.Content_Type, "text/html");
	m.setHeader(HTTP.Content_Length, message.getContentLength());
	m.setHeader(HTTP.StatusCode, 200);	

	reply m;        
}
 
